# -*- coding: utf-8 -*-
"""Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tgpip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu126
ekeRdCOAvuWKWgWMCRep8Nj09itpSi
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
import torch
import torchvision.models as models

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

class_names = ['Acne and Rosacea Photos', 'Actinic Keratosis Basal Cell Carcinoma and other Malignant Lesions', 'Atopic Dermatitis Photos', 'Bullous Disease Photos', 'Cellulitis Impetigo and other Bacterial Infections', 'Eczema Photos', 'Exanthems and Drug Eruptions', 'Hair Loss Photos Alopecia and other Hair Diseases', 'Herpes HPV and other STDs Photos', 'Light Diseases and Disorders of Pigmentation', 'Lupus and other Connective Tissue diseases', 'Melanoma Skin Cancer Nevi and Moles', 'Nail Fungus and other Nail Disease', 'Poison Ivy Photos and other Contact Dermatitis', 'Psoriasis pictures Lichen Planus and related diseases', 'Scabies Lyme Disease and other Infestations and Bites', 'Seborrheic Keratoses and other Benign Tumors', 'Systemic Disease', 'Tinea Ringworm Candidiasis and other Fungal Infections', 'Urticaria Hives', 'Vascular Tumors', 'Vasculitis Photos', 'Warts Molluscum and other Viral Infections']

class CustomResNet50(nn.Module):
    def __init__(self, num_classes):
        super(CustomResNet50, self).__init__()
        # load ResNet50
        self.base_model = models.resnet50(weights='IMAGENET1K_V1')


        self.base_model.fc = nn.Identity()


        self.fc1 = nn.Linear(2048, 512)
        self.fc2 = nn.Linear(512, num_classes)


        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.base_model(x)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

num_classes = 23
model = CustomResNet50(num_classes=num_classes).to(device)

# Create model instance
model = CustomResNet50(num_classes=num_classes)

# Load the trained weights
loaded_model = torch.load(r'D:\project\5002\myproject\detection\resnet50_skin_disease_model.pth',weights_only=False)

# Check if the loaded file is a dictionary (state_dict) or the model itself
if isinstance(loaded_model, dict):
    model.load_state_dict(loaded_model)
else:
    # If it's the model, assign it directly
    model = loaded_model

model.to(device) 



from PIL import Image
import torchvision.transforms as transforms

def predict_image(image_path, model, device, class_names):

    # Load images and preprocess them
    image = Image.open(image_path).convert("RGB")
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    image = transform(image).unsqueeze(0).to(device)

    # prediction
    # Move the model to the same device as the input tensor
    model.to(device)  # This line moves the model to the GPU if device is cuda
    model.eval()
    with torch.no_grad():
        output = model(image)
        _, predicted = torch.max(output, 1)

    predicted_class_index = predicted.item()
    predicted_class_name = class_names[predicted_class_index]

    return predicted_class_name

# Upload image or specify image path
image_path = r'C:\Users\123\Desktop\project5001\微信图片_20241016162227.png' # 替换为实际路径

# Predict image category
predicted_class = predict_image(image_path, model, device, class_names)

# Output prediction results
print(f"predict result: {predicted_class}")












